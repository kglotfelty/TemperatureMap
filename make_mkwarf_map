#!/usr/bin/env python

# Copyright (C) 2013,2022 Smithsonian Astrophysical Observatory
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

'Make weighted arf for all id values in an input map file'

import os
import sys
from tempfile import NamedTemporaryFile
import numpy as np

import ciao_contrib.logger_wrapper as lw
from ciao_contrib.runtool import make_tool

TOOLNAME = "make_mkwarf_map"
__REVISION__ = "07 January 2022"

lw.initialize_logger(TOOLNAME)
VERB0 = lw.get_logger(TOOLNAME).verbose0
VERB1 = lw.get_logger(TOOLNAME).verbose1
VERB2 = lw.get_logger(TOOLNAME).verbose2
VERB3 = lw.get_logger(TOOLNAME).verbose3
VERB5 = lw.get_logger(TOOLNAME).verbose5


def make_warf(regid, pars):
    'Create a weighted ARF'

    dmimgthresh = make_tool("dmimgthresh")
    dmcopy = make_tool("dmcopy")
    sky2tdet = make_tool("sky2tdet")
    mkwarf = make_tool("mkwarf")
    dmhedit = make_tool("dmhedit")
    dmst = make_tool("dmstat")

    tmpdir = os.environ["ASCDS_WORK_PATH"]

    tmp_single_map = NamedTemporaryFile(dir=tmpdir)
    tmp_single_map_unit = NamedTemporaryFile(dir=tmpdir)
    tmp_sky2tdet_out = NamedTemporaryFile(dir=tmpdir)
    tmp_mkwarf_out = NamedTemporaryFile(dir=tmpdir)

    oroot = pars["outroot"]+f"_{regid}"

    VERB3("Processing "+oroot)

    try:
        dmimgthresh(pars["mapfile"]+"[opt type=i4]",
                    tmp_single_map.name,
                    cut=f"{regid}:{regid}", value=0, clobber=True)

        img = pars["infile"]
        dmcopy(f"{img}[sky=mask({tmp_single_map.name})]",
               tmp_single_map_unit.name, clobber=True)

        dmst(tmp_single_map_unit.name, centroid=False)
        if float(dmst.out_sum) == 0:
            # If there are 0 counts in region, then skip it.
            return

        sky2tdet(tmp_single_map_unit.name, pars["asphistfile"],
                 tmp_sky2tdet_out.name+"[wmap]", clobber=True)

        rmf = pars["rmffile"]
        mkwarf(tmp_sky2tdet_out.name, oroot+".arf", tmp_mkwarf_out.name,
               spectrum="", egrid=f"grid({rmf}[cols energ_lo,energ_hi])",
               msk=pars["maskfile"], clobber=True)
        dmhedit(oroot+".arf", file="", op="add", key="GRIDVAL",
                value=regid)

    except Exception as badstuff:
        print(badstuff)


#
# Main Routine
#
@lw.handle_ciao_errors(TOOLNAME, __REVISION__)
def main():
    'Main routine'

    from ciao_contrib.param_soaker import get_params
    # Load parameters
    pars = get_params(TOOLNAME, "rw", sys.argv,
                      verbose={"set": lw.set_verbosity, "cmd": VERB1})

    import ciao_contrib.ancillaryfiles as anc
    mask, bpix = anc.find_ancillary_files(pars["infile"],
                                          ["mask", "bpix"])
    if not pars["maskfile"]:
        pars["maskfile"] = mask[0]

    if not pars["bpixfile"]:
        pars["bpixfile"] = bpix[0]

    from pycrates import read_file
    mapimg = read_file(pars["mapfile"]).get_image()
    mapvals = np.unique(mapimg.values)
    mapvals = mapvals[mapvals > 0].astype(np.int32)
    VERB1(f"Working to create {mapvals.size} weighted ARFs")

    from ciao_contrib.runtool import acis_set_ardlib
    acis_set_ardlib(pars["bpixfile"], verbose=0)

    from ciao_contrib.runtool import new_pfiles_environment
    with new_pfiles_environment(ardlib=True):
        from ciao_contrib._tools.taskrunner import TaskRunner
        taskrunner = TaskRunner()
        for indx in mapvals:
            taskrunner.add_task("warf"+str(indx), "", make_warf, indx,
                                pars)
        taskrunner.run_tasks()


if __name__ == "__main__":
    main()
    sys.exit(0)
